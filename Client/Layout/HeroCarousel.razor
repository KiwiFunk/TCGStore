@using Shared.Models
@using Client.Services
@inject FeaturedProductService FeaturedProductService


<div class="relative overflow-hidden">
    <!-- Carousel Container -->
    <div class="relative h-[550px] w-full overflow-hidden">
        @if (featuredProducts == null)
        {
            <!-- Loading State -->
            <div class="h-full flex items-center justify-center">
                <div class="animate-spin rounded-full h-16 w-16 border-b-4 border-purple-600"></div>
            </div>
        }
        else if (!featuredProducts.Any())
        {
            <!-- No Featured Products -->
            <div class="h-full bg-gradient-to-r from-gray-800 to-gray-900 flex items-center justify-center text-white">
                <p class="text-2xl">No featured products available</p>
            </div>
        }
        else
        {
            <!-- Carousel Items -->
            @for (int i = 0; i < featuredProducts.Count; i++)
            {
                var product = featuredProducts[i];
                var isActive = i == activeIndex;
                
                <div class="z-10 absolute inset-0 w-full transition-opacity duration-700 ease-in-out @(isActive ? "opacity-100" : "opacity-0 pointer-events-none")">
                     
                    <!-- Hero Image with Dark Overlay -->
                    <div class="absolute inset-0 z-0">
                        <!-- Background Image -->
                        @if (!string.IsNullOrEmpty(product.HeroImageUrl))
                        {
                            <img src="@product.HeroImageUrl" alt="@product.Headline" 
                                 class="w-full h-full object-cover @(isActive ? "scale-animation" : "")" />
                        }
                        else
                        {
                            <div class="@product.BackgroundColor w-full h-full @(isActive ? "scale-animation" : "")"></div>
                        }
                        
                        <!-- Dark Gradient Overlay -->
                        <div class=" z-11 absolute inset-0 bg-gradient-to-b from-black/70 to-transparent"></div>
                    </div>
                    
                    <!-- Content -->
                    <div class="relative z-10 flex flex-col h-full">
                        <div class="container px-16 py-16 lg:py-24 flex flex-col h-full justify-center">
                            <div class="max-w-2xl">
                                <!-- Headline -->
                                <h1 class="text-4xl md:text-6xl font-bold mb-4 text-white">
                                    @product.Headline
                                </h1>
                                
                                <!-- Subheadline -->
                                <p class="text-lg md:text-xl mb-8 text-gray-200">
                                    @product.Subheadline
                                </p>
                                
                                <!-- CTA Button -->
                                <a href="@product.ButtonUrl" 
                                   class="inline-flex items-center px-6 py-3 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-lg transition-colors">
                                    @product.ButtonText
                                    <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                                    </svg>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
            
            <!-- Navigation Dots -->
            <div class="z-50 absolute bottom-5 left-0 right-0 flex justify-center">
                <div class="flex space-x-2">
                    @for (int i = 0; i < featuredProducts.Count; i++)
                    {
                        var index = i; // Capture for lambda
                        <button @onclick="() => SetActiveSlide(index)" 
                                class="w-3 h-3 rounded-full transition-all duration-300 @(index == activeIndex ? "bg-white scale-125" : "bg-white/50 hover:bg-white/70")"></button>
                    }
                </div>
            </div>
            
            <!-- Navigation Arrows -->
            <button @onclick="PreviousSlide" class="z-50 absolute left-4 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/50 text-white rounded-full p-2 transition-all">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
            </button>
            
            <button @onclick="NextSlide" class="z-50 absolute right-4 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/50 text-white rounded-full p-2 transition-all">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
            </button>
        }
    </div>
    
    <!-- Fade-out to content transition -->
    <div class="h-20 bg-gradient-to-b from-transparent to-gray-50"></div>
</div>

@code {
    private List<Featured>? featuredProducts;
    private int activeIndex = 0;
    private int slideDuration = 9000; // Duration for each slide in milliseconds
    private System.Threading.Timer? carouselTimer;
    
    protected override async Task OnInitializedAsync()
    {
        featuredProducts = await FeaturedProductService.GetFeaturedProductsAsync();
        
        // Start automatic carousel rotation
        carouselTimer = new System.Threading.Timer(_ => 
        {
            NextSlide();
            InvokeAsync(StateHasChanged);
        }, null, slideDuration, slideDuration); // Callback, state, initial delay, period
    }
    public void Dispose()
    {
        carouselTimer?.Dispose();
    }
    
    private void SetActiveSlide(int index)
    {
        if (featuredProducts != null && index >= 0 && index < featuredProducts.Count)
        {
            activeIndex = index;
            ResetTimer();
        }
    }
    
    private void NextSlide()
    {
        if (featuredProducts != null && featuredProducts.Any())
        {
            activeIndex = (activeIndex + 1) % featuredProducts.Count;
            ResetTimer();
        }
    }
    
    private void PreviousSlide()
    {
        if (featuredProducts != null && featuredProducts.Any())
        {
            activeIndex = (activeIndex - 1 + featuredProducts.Count) % featuredProducts.Count;
            ResetTimer();
        }
    }
    
    private void ResetTimer()
    {
        carouselTimer?.Change(slideDuration, slideDuration); // Reset the timer when manually changing slides
    }
}